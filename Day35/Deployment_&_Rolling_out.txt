///====Deployment and Rolling Out Feature in Kubernetes====\\\

1. What is a Kubernetes Deployment?
Deployment manages the lifecycle of Pods, including scaling, updating, and monitoring.
Components:
Pod Template: Defines the container image and settings for Pods.
Replicas: Specifies the number of Pods you want to run simultaneously.
Update Strategy: Defines how Pods are updated (like rolling updates).


============================================================================================================================================


2. Key Commands for Deployment:
To create a deployment using nginx:latest, you use kubectl create deployment.
You can check the status or view details of the deployment using kubectl get deployments.


============================================================================================================================================


3. Deployment Using YAML File:
You can manage deployments via YAML files. The YAML includes:
apiVersion: Identifies the API version (apps/v1).
Metadata: Contains the deployment name.
Spec: Includes replicas, template, and container settings.
You define the container, its image, and any ports in the spec section.


============================================================================================================================================


4. What is a Rollout?
A rollout is the process of updating a Kubernetes application with no downtime.
Why are rollouts used?
Ensure the application can be updated without taking it offline.
Rollouts help gradually update Pods (like updating some Pods to a new version while others keep running).
You can rollback to a previous version if the new update has issues.


============================================================================================================================================


5. Rollout Commands:
Rollout Status: Use this command to check the status of your rollout. It ensures that everything is working as expected.
Rollout Undo: This lets you roll back your deployment to a previous version if thereâ€™s a problem with the update.
6. Hands-On Example:
You can create a deployment for nginx, then change the image version to initiate a rolling update.
Use the rollout command to check progress or undo if needed.
7. Real-World Scenario:
Rolling Update with Zero Downtime: This is commonly used in web applications. Imagine updating your web servers (from nginx:1.17 to nginx:1.18) without any downtime for users. With rollouts, some Pods will be updated, while others remain live, ensuring smooth transitions.
Important Commands:

kubectl create deployment: For creating deployments.
kubectl apply -f <file>: To apply changes via a YAML file.
kubectl rollout status: To monitor a rollout.
kubectl rollout undo: To undo a rollout and revert to a previous revision.
These concepts are essential for managing deployments and updates in a Kubernetes production environment!