///====Secrets in Kubernetes====\\\

1. What are Kubernetes Secrets?

    - Kubernetes Secrets store sensitive data, such as passwords, API keys, and tokens.

    - Secrets help keep sensitive information secure and separate from the application code.


====================================================================================================================================================================================


2. Why Use Secrets?

    - Securely store and manage sensitive data.

    - Control access to sensitive information in a Kubernetes cluster.

    - Avoid exposing credentials directly in configuration files.


====================================================================================================================================================================================


3. Creating Secrets

    - Method 1: Using kubectl command.
        
        Example: kubectl create secret generic my-secret --from-literal=username=myUser --from-literal=password=myPassword

    - Method 2: Using YAML file.

        Define the Secret in a YAML file, with data encoded in Base64 format.
        
        Example

        apiVersion: v1
        kind: Secret
        metadata:
            name: my-secret
        data:
            username: bXlVc2Vy
            password: bXlQYXNzd29yZA==


====================================================================================================================================================================================


4. Base64 Encoding and Decoding

    - Kubernetes requires Secret data to be encoded in Base64 format.

        - To encode: echo -n 'myPassword' | base64

        - To decode: echo -n 'bXlQYXNzd29yZA==' | base64 --decode


====================================================================================================================================================================================


5. Using Secrets in Pods

    - You can reference Secrets in Pod configurations to pass sensitive data to applications.

        - Example

                apiVersion: v1
                kind: Pod
                metadata:
                name: my-pod
                spec:
                containers:
                - name: my-container
                    image: nginx
                    env:
                    - name: USERNAME
                    valueFrom:
                        secretKeyRef:
                        name: my-secret
                        key: username


====================================================================================================================================================================================


6. Real-Time Scenarios for Using Secrets

    - Storing Database Credentials: Use Secrets to securely manage database usernames and passwords.

    - Storing API Keys or Tokens: Safeguard sensitive tokens used for accessing external services.

    - Managing SSL Certificates: Use Secrets to store SSL/TLS certificates for secure communication.


====================================================================================================================================================================================


7. Tasks

    - Task 1: 
        Encrypt and decrypt a Secret for application.properties.

        Encrypt using Base64, add to a YAML file, and create the Secret.
        
        Decode the Secret to verify.

    - Task 2: 
        Create a Secret from environment.sh file.

        Example content: variable1=value1

        Use kubectl create secret to generate the Secret and decode it to view the values.
    
    - Task 3: 
        Manage MySQL credentials securely.

        Encrypt mysqlUser and mysqlPassword using Base64.

        Create a secret.yaml file to store these credentials.

        Apply the Secret using kubectl apply -f secret.yaml.

8. Common Commands

    - Create a Secret: kubectl create secret generic my-secret --from-literal=<key>=<value>

    - View Secrets: kubectl get secrets

    - Describe a Secret: kubectl describe secret <secret-name>

    - Decode a Secret value: echo <encoded-value> | base64 --decode

9. Troubleshooting

    - Issue: Secret not available to a Pod.
        
        Solution: Ensure the Pod's configuration references the Secret correctly.

    - Issue: Encoding/Decoding errors.

        Solution: Verify that Base64 encoding/decoding is done properly.

10. Conclusion

    - Kubernetes Secrets provide a secure way to manage sensitive data in your applications.

    - Always encode sensitive information in Base64 before adding it to a Secret.