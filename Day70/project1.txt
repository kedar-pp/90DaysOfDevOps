///====Project 1====\\\\

What I Did Today:
1.	Created the Project Repository
o	Set up a GitHub repository for the Django To-Do List project.
2.	Executed the Django Project
o	Ran the Django project in a Python virtual environment locally.
3.	Launched an AWS EC2 Instance
o	Spun up an EC2 instance to host the application.
4.	Cloned the Project Code to EC2
o	Pulled the project repository onto the EC2 instance.


====================================================================================================================


Why These Steps?
•	Repository: To version control and share code.
•	Python Virtual Environment: To manage dependencies cleanly.
•	AWS EC2: To host the application on the cloud.
•	Cloning: To set up the project on the server for future deployment.


====================================================================================================================


Future Tasks:
1.	Write a Dockerfile to containerize the Django app.
2.	Create a Jenkins CI/CD pipeline for automated build and deployment.
3.	Deploy the app on the EC2 instance for public access.


====================================================================================================================


Key Takeaways:
•	Starting with a strong foundation makes deployment smoother.
•	Cloud hosting like AWS EC2 is essential for real-world projects.
•	Each step builds toward automating the entire deployment process.
This project is a great way to integrate Django, Docker, Jenkins, and AWS. It highlights the importance of hands-on practice in understanding end-to-end workflows in DevOps!


====================================================================================================================

