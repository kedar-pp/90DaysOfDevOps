///=== Multi Node Cluster Kubernetes ===\\\

1. Set Up Virtual Machines on VMware

    - You need to create multiple virtual machines (VMs) to simulate a real-world Kubernetes cluster:

        - Master Node: Controls the cluster.

        - Worker Nodes: Execute the applications (pods) and handle workloads.

    - Steps:

        - Open VMware and create VMs for both the master and worker nodes.

        - Install CentOS on all VMs.
    
        - Ensure they all have unique hostnames and static IPs.


=============================================================================================================================

2. Prepare the Nodes

    - Before installing Kubernetes, some configurations need to be done to make sure Kubernetes runs smoothly:

    - Commands:

        - Disable Swap (swap must be disabled for Kubernetes to run):

            - swapoff -a

        - Also, make this permanent by commenting out the swap line in the /etc/fstab file.

        - Stop and Disable Firewall:

            - systemctl stop firewalld
            
              systemctl disable firewalld

        - Enable IP Forwarding: This is required for proper network routing within the cluster.

            - echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
              sysctl -p


=============================================================================================================================

3. Install Docker and Kubernetes Components

    - We will install Docker as the container runtime and Kubernetes components like kubeadm, kubectl, and kubelet:

    - Commands:

    - Install Docker:

        - yum install -y docker
          systemctl start docker
          systemctl enable docker

    - Install Kubernetes
     
        - cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
            [kubernetes]
            name=Kubernetes
            baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
            enabled=1
            gpgcheck=1
            repo_gpgcheck=1
            gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
            EOF
 
        - Then install the necessary components:

            - yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
              systemctl enable --now kubelet


=============================================================================================================================

4. Initialize the Master Node


=============================================================================================================================

5. Set Up Networking for Kubernetes Pods
You need a network add-on to allow Kubernetes to communicate between nodes. We'll use Calico here:



=============================================================================================================================


6. Join Worker Nodes to the Cluster
Once the master node is set up, you can join the worker nodes to the cluster. On the master node, after initialization, youâ€™ll get a kubeadm join command:

=============================================================================================================================


7. Verifying the Cluster
After joining the nodes, check the status of the cluster to ensure everything is working properly:



============================================================================================================================

8. Real-World Use Case
A multi-node Kubernetes cluster is vital in real-world scenarios for handling production workloads. It allows:

Scalability: You can add more worker nodes as needed.
High Availability: Workloads are distributed, ensuring continuous service even if one node fails.
Load Balancing: It balances the load across different nodes to ensure efficient resource usage.
Example: A large-scale web application can deploy web servers on multiple worker nodes, ensuring uninterrupted service even if one node goes down. Kubernetes automatically handles load balancing and recovery.