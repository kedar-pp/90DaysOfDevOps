///====Creating AWS S3 and learnning Meta Argument====\\\

Task 1: AWS S3 Bucket Creation
What I Did:

Created an S3 bucket using Terraform.
Added tags like Name and Environment for resource identification.
Key Commands:

terraform init: Initializes the working directory with the required plugins.
terraform apply: Creates the resources defined in the .tf file.
terraform destroy: Destroys the created resources.
Real-Life Use Case:
S3 buckets are essential for cloud storage, used in applications for storing logs, backups, or static website hosting.


============================================================================================================================================


Task 2: Meta Arguments in Terraform
Meta arguments make Terraform configurations dynamic and flexible.

count

Allows creation of multiple resources based on a number.
Example: Creating 3 EC2 instances with one resource block.
Use Case: Useful when scaling up or down resources.
for_each

Iterates over a map or list to create resources for each item.
Example: Assigning specific names to multiple EC2 instances.
Use Case: Helps manage unique configurations for resources.
depends_on

Specifies dependencies between resources.
Example: Ensures an EC2 instance is created only after an S3 bucket.
Use Case: Helps avoid resource creation conflicts.
lifecycle

Controls how resources are updated, replaced, or retained.
Example: Prevents an S3 bucket from being destroyed during updates.
Use Case: Ensures resource integrity and safety during changes.
Real-Life Scenarios
Count: Scaling instances for high traffic.
For_each: Assigning configurations to multiple resources (e.g., tagging resources).
Depends_on: Managing resource dependencies like databases and applications.
Lifecycle: Protecting critical resources like S3 buckets from accidental deletions.
Why These Concepts Matter
These meta arguments help optimize resource management in cloud infrastructure.
They ensure better scalability, dependency management, and resource safety.