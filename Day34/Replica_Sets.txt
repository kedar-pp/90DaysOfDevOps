///====Diving Into Replica sets ====\\\

1. What is a Replica Set in Kubernetes?
Replica Set ensures a certain number of pod replicas are always running.
It provides self-healing by recreating failed pods automatically.
Helps maintain high availability and allows for scaling up or down.

=============================================================================================

2. Why Use Replica Sets?
Ensure your application has the required number of pods.
Scale applications easily to meet traffic demand.
Automatically recreates pods if they fail.

=============================================================================================

3. Components of a Replica Set
Selector: Filters the pods based on labels to manage them.
Replicas: Defines how many pod copies you want to run.
Template: Specifies pod details like container image, labels, and configuration.
4. Life Cycle of a Replica Set
Create: When you create a Replica Set, it launches the defined number of pods.
Scale: You can increase or decrease the number of pods by changing the replicas.
Manage: Kubernetes ensures the desired number of pods is always running.
5. Hands-On Tasks
Task 1: Create a Replica Set
Define the YAML file with pods and replicas.
Command:
bash
Copy code
kubectl apply -f replicaset.yaml
Check if the pods are running:
bash
Copy code
kubectl get pods
Task 2: Scale the Replica Set
Scale up or down by increasing or decreasing the number of replicas.
Command:
bash
Copy code
kubectl scale rs my-replicaset --replicas=5
Task 3: Assign Pods to Specific Nodes (Node Selector)
Label a node:
bash
Copy code
kubectl label nodes worker2.example.com nodetype=production
Modify the Replica Set YAML to specify the node selector and apply the changes.
6. Real-Time Scenario
Imagine running an e-commerce site during a sale. You use a Replica Set to ensure multiple replicas of your frontend service run to handle high traffic.
7. Important Commands
Create a Replica Set: kubectl apply -f replicaset.yaml
Get pods: kubectl get pods
Scale Replica Set: kubectl scale rs my-replicaset --replicas=N
Label a Node: kubectl label nodes <node-name> nodetype=production
Delete a Pod: kubectl delete pod <pod-name>
Get Replica Sets: kubectl get rs

